import json

import browse
from config import Config
from duckduckgo_search import ddg


class Google_Search:
    def __init__(self, cfg: 'Config'=Config):
        self.cfg = cfg

    def google_search(self, query: str, num_results: int =8):
        search_results = []
        for j in ddg(query, max_results=num_results):
            search_results.append(j)

        return json.dumps(search_results, ensure_ascii=False, indent=4)

    def google_official_search(self, query: str, num_results: int =8):
        import json

        from googleapiclient.discovery import build
        from googleapiclient.errors import HttpError



        try:
            # Get the Google API key and Custom Search Engine ID from the config file
            api_key = self.cfg.google_api_key #Vanish - put self here
            custom_search_engine_id = self.cfg.custom_search_engine_id #Vanish - put self here

            # Initialize the Custom Search API service
            service = build("customsearch", "v1", developerKey=api_key)
            
            # Send the search query and retrieve the results
            result = service.cse().list(q=query, cx=custom_search_engine_id, num=num_results).execute()

            # Extract the search result items from the response
            search_results = result.get("items", [])
            
            # Create a list of only the URLs from the search results
            search_results_links = [item["link"] for item in search_results]

        except HttpError as e:
            # Handle errors in the API call
            error_details = json.loads(e.content.decode())
            
            # Check if the error is related to an invalid or missing API key
            if error_details.get("error", {}).get("code") == 403 and "invalid API key" in error_details.get("error", {}).get("message", ""):
                return "Error: The provided Google API key is invalid or missing."
            else:
                return f"Error: {e}"

        # Return the list of search result URLs
        return search_results_links



    def get_text_summary(self, url: str, question: str):
        text = browse.scrape_text(url)
        summary = browse.summarize_text(text, question)
        return """ "Result" : """ + summary

    def get_hyperlinks(self, url: str):
        link_list = browse.scrape_links(url)
        return link_list

        
    def browse_website(self, url: str, question: str):
        summary = self.get_text_summary(url, question)
        links = self.get_hyperlinks(url)

        # Limit links to 5
        if len(links) > 5:
            links = links[:5]

        result = f"""Website Content Summary: {summary}\n\nLinks: {links}"""

        return result

    def get_luna_functions(self):

        return {"wrapper name":"agent_manager","functions":[{"name":"create_agent", "description":"parameters: task - the task the agent is meant to perform, prompt - the initial prompt or the message to the agent, model - the LLM to be used; description: The function first creates an empty list with the user's initial prompt. Then it calls 'create_chat_completion' function to generate the chatbot's initial response based on the prompt and selected model. The resulting response is appended to the messages list along with the role of the assistant. A unique key is generated for the new agent by incrementing the 'next_key' attribute. The new agent is then added to the 'agents' dictionary, which maps keys to tuples containing the task, message history, and LLM for each agent.; return: the method returns the key of the new agent and the initial response generated by the LLM.","function":self.create_agent()}, {"name":"message_agent", "description":"parameters: key - unique key allowing the user to send a specified message to a previously created AI chatbot, message - a user written prompt for the LLM agent; description: The function retrieves the chatbot's current converstation history, adds the new message to the history and then uses the GPT-3 API to generate a response to the message. Finally the generated response is appended to the converstation history.; return: the generated response is returned as a string","function":self.message_agent()}, {"name":"list_agents", "description":"parameters: ; description: The 'list_agents' method returns a list of tuples where each tuple contains two elements, the key assigned to the agent and its associated task. The key is the unique identifier assigned to the agent and the value is a tuple that contains the agent's task, message history and LLM.; return: the list is returned","function":self.list_agents()}, {"name":"delete_agent", "description":"parameters: ; description: ; return:","function":self.delete_agent()}]}